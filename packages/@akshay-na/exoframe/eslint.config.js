module.exports = {
  root: true,
  env: {
    jest: true,
    node: true,
    es2019: true,
  },
  parser: "@typescript-eslint/parser",
  parserOptions: {
    ecmaVersion: 6,
    sourceType: "module",
    tsconfigRootDir: __dirname,
    project: ["./tsconfig.json"],
  },
  plugins: ["import", "jsdoc", "@typescript-eslint"],
  ignorePatterns: ["**/*.spec.ts", "**/jquery/**/*.js", "tests/e2e/**/*.js"],
  extends: [
    "eslint:recommended",
    "plugin:jsdoc/recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
  ],
  ignorePatterns: [
    "node_modules/",
    "bower_components/",
    "dist/",
    "build/",
    "target/",
    "tmp/",
    "coverage/",
    "src/temp/",
    "temp/",
    "sandpit/",
    ".eslintrc.js",
    ".releaserc.js",
    "commitlint.config.js",
    ".commitlintrc.js",
    "jest.config.js",
  ],
  rules: {
    "arrow-body-style": ["off"],
    "arrow-parens": ["error"],
    "camelcase": ["error"],
    "eqeqeq": ["error"],
    "new-parens": ["error"],
    "no-multiple-empty-lines": [
      "error",
      {
        max: 2,
        maxEOF: 0,
      },
    ],
    "no-new-symbol": ["error"],
    "no-new-wrappers": ["error"],
    "no-return-await": ["error"],
    "no-throw-literal": ["error"],
    "no-trailing-spaces": ["error"],
    "no-unused-vars": [
      "error",
      {
        vars: "local",
        args: "after-used",
      },
    ],
    "prefer-const": [
      "error",
      {
        destructuring: "all",
      },
    ],
    "radix": "error",
    "@typescript-eslint/array-type": [
      "error",
      {
        default: "array-simple",
        readonly: "generic",
      },
    ],
    "import/no-default-export": ["warn"],
    "import/no-deprecated": ["warn"],
    "jsdoc/check-alignment": ["error"],
    "jsdoc/check-indentation": ["error"],
    "jsdoc/newline-after-description": ["warn"],
    "@typescript-eslint/no-floating-promises": ["error"],
    "@typescript-eslint/ban-types": ["error"],
    "@typescript-eslint/consistent-type-assertions": ["error"],
    "@typescript-eslint/explicit-member-accessibility": [
      "error",
      {
        accessibility: "explicit",
        overrides: {
          constructors: "no-public",
          parameterProperties: "no-public",
        },
      },
    ],
    "@typescript-eslint/explicit-module-boundary-types": ["off"],
    "@typescript-eslint/member-delimiter-style": ["error"],
    "@typescript-eslint/naming-convention": [
      "error",
      {
        selector: "property",
        modifiers: ["static"],
        format: ["UPPER_CASE"],
        leadingUnderscore: "allow",
        trailingUnderscore: "allow",
      },
      {
        selector: "property",
        modifiers: ["static"],
        types: ["boolean"],
        format: ["PascalCase", "UPPER_CASE"],
        prefix: ["is", "should", "has", "can", "did", "will"],
        leadingUnderscore: "allow",
        trailingUnderscore: "allow",
      },
    ],
    "@typescript-eslint/no-empty-function": ["off"],
    "@typescript-eslint/no-empty-interface": ["off"],
    "@typescript-eslint/no-explicit-any": [
      "error",
      {
        ignoreRestArgs: true,
      },
    ],
    "@typescript-eslint/no-namespace": ["off"],
    "@typescript-eslint/no-non-null-assertion": ["warn"],
    "@typescript-eslint/no-require-imports": ["warn"],
    "@typescript-eslint/no-unused-expressions": ["error"],
    "@typescript-eslint/semi": ["error"],
    "@typescript-eslint/strict-boolean-expressions": ["error"],
    "@typescript-eslint/triple-slash-reference": [
      "error",
      {
        path: "always",
        types: "never",
        lib: "never",
      },
    ],
  },
};
