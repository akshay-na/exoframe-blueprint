# Configure the path before runnning the docker compose.

# Define the paths as environment variables within the compose file itself
# environment:
#   APP_PATH: "/p/Projects/node-template"
#   DATA_PATH: "/p/Projects/Data/Collaborative_Platform"

services:
  # Node.js Application with Nodemon
  app:
    build:
      context: /p/Projects/node-template # Path to the directory containing the Dockerfile
      dockerfile: Dockerfile
    container_name: app_container
    volumes:
      - /p/Projects/node-template:/usr/src/app # Bind host's app folder to container's app directory
      - /usr/src/app/node_modules
    working_dir: /usr/src/app
    command: "npx nodemon --legacy-watch src/app/server.ts"
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
    restart: always
    depends_on:
      - mongodb
      - mysql
      - redis
      - grafana

  # MongoDB Service
  mongodb:
    image: mongo:latest
    container_name: mongo_container
    ports:
      - "27017:27017"
    volumes:
      - /p/Projects/Data/Collaborative_Platform/mongo_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=secret
    restart: always

  # MySQL Service
  mysql:
    image: mysql:latest
    container_name: mysql_container
    ports:
      - "3306:3306"
    volumes:
      - /p/Projects/Data/Collaborative_Platform/mysql_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: app_db
      MYSQL_USER: user
      MYSQL_PASSWORD: user_password
    restart: always

  # Redis Cache
  redis:
    image: redis:latest
    container_name: redis_container
    ports:
      - "6379:6379"
    volumes:
      - /p/Projects/Data/Collaborative_Platform/redis_data:/data
    restart: always

  # Grafana Service
  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana_container
    ports:
      - "3001:3000"
    volumes:
      - /p/Projects/Data/Collaborative_Platform/grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin_password
    restart: always

  # # GitHub Runner Service
  # github_runner:
  #   image: myoung34/github-runner:latest
  #   container_name: github_runner_container
  #   volumes:
  #     - /p/Projects/Data/Collaborative_Platform/runner:/etc/github-runner
  #   environment:
  #     REPO_URL: https://github.com/yourusername/yourrepo
  #     RUNNER_NAME: your_runner
  #     ACCESS_TOKEN: your_token
  #     RUNNER_WORKDIR: /tmp/github-runner
  #   restart: always

  # MinIO (S3-compatible)
  minio:
    image: minio/minio:latest
    container_name: minio_container
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - /p/Projects/Data/Collaborative_Platform/minio_data:/data
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=admin_password
    command: server /data --console-address ":9001"
    restart: always

  # Azurite (Azure Storage Emulator)
  azurite:
    image: mcr.microsoft.com/azure-storage/azurite:latest
    container_name: azurite_container
    ports:
      - "10000:10000" # Blob service
      - "10001:10001" # Queue service
      - "10002:10002" # Table service
    volumes:
      - /p/Projects/Data/Collaborative_Platform/azurite_data:/data
    command: "azurite-blob --blobHost 0.0.0.0 --location /data"
    restart: always

# Networks for inter-service communication and security
networks:
  default:
    driver: bridge
